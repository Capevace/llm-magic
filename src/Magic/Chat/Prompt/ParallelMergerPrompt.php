<?php

namespace Mateffy\Magic\Chat\Prompt;

use Mateffy\Magic\Chat\Messages\TextMessage;
use Mateffy\Magic\Chat\Prompt;
use Mateffy\Magic\Chat\ToolChoice;
use Mateffy\Magic\Extraction\Strategies\Extractor;
use Mateffy\Magic\Tools\Prebuilt\Extract;

class ParallelMergerPrompt implements Prompt
{
    public function __construct(
        protected Extractor $extractor,
        protected array $datas
    ) {}

    public function system(): string
    {
        $schema = json_encode(
            $this->extractor->schema,
            JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT
        );

        return <<<PROMPT
        <instructions>
        You are a structured data merger.
        You are given a list of JSON objects that you need to merge into one JSON object.
        These JSON objects have been generated by a structured data extractor LLM, which got the data from files and other sources.
        Each JSON object follows the same specific schema, which is the same that you have been given.
        The data they've output may be incomplete, as they may have only seen a subset of the source documents.
        This is where you come in. It is your job to merge this data into one JSON object.
        IT IS IMPORTANT THAT THE DATA SCHEMA STAYS THE SAME. DO NOT INVENT ANY FIELDS. DO NOT REMOVE ANY FIELDS UNLESS IT MAKES FULL SENSE AND IS COMPLIANT WITH THE SCHEMA.

        The difficult task you are facing is making sure the data is merged correctly. This is difficult as the documents may not reference the same entities.
        For example one LLM may have looked at document A containing product A and B, and another LLM may have looked at document B containing only product B.
        If you merge these two documents dumbly, you may end up with just one or three product entities, which is not correct.
        So, you'll need to identify entities as best as you can, and then merge them correctly.
        There may also be duplicates. Some of them obvious, some of them not so much. If you're not sure something is a duplicate, it's better to keep it in the data!
        You can combine duplicates into one BUT MAKE SURE TO ONLY DO THIS FOR ACTUAL DUPLICATES. DO NOT REMOVE DATA THAT IS NOT A DUPLICATE.
        
        The output schema may have properties that are named "xxx_artifact_id" or include references to artifact IDs in the property description. If that is the case, you're supposed to assign images to these properties.
        The data you are given may already have these references assigned. DO NOT REMOVE ANY OF THESE REFERENCES. You can fill empty values if you are merging two objects for example, but NEVER remove them.
        The artifact IDs have a format that you HAVE TO use. Otherwise the data returned is INVALID and will FAIL! 
        So make sure the IDs are in the correct format: "artifact:ID/images/imageNUM.EXT" (e.g. "artifact:123456/images/image1.jpg", "artifact:873242393/images/image72.png").
        ONLY USE ARTIFACTS THAT YOU CAN ACTUALLY SEE IN THE DATA. DO NOT MAKE ASSUMPTIONS OR MAKE THEM UP. MAKE SURE TO USE THE CORRECT ID FORMAT! DO NOT USE NORMAL URLS HERE! 

        You are given the notes that were used to create the JSON object. These contain info that was relevant when generating the output, and may be helpful in understanding the data.
        </instructions>

        <json-schema>
        {$schema}
        </json-schema>

        <json-schema-notes>
        {$this->extractor->outputInstructions}
        </json-schema-notes>
        PROMPT;
    }

    public function prompt(): string
    {
        $jsonObjects = collect($this->datas)
            ->filter()
            ->map(fn (array $data) => json_encode($data, JSON_THROW_ON_ERROR | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE))
            ->map(fn (string $json) => "<json-object>{$json}</json-object>")
            ->join("\n");

        return <<<TXT
        <json-to-merge-into-one>
        {$jsonObjects}
        </json-to-merge-into-one>

        <task>
            Merge the JSON objects in <json-to-merge-into-one> into one JSON object both logically and syntactically.
            Do your best to merge the data so it makes sense and is complete.
            
            MAKE SURE TO USE THE `extract` tool to merge the data. If you don't call the tool, the data will not be merged and the LLM will not be able to continue!
            ANY DATA YOU OUTPUT WITHOUT USING THE TOOL IS INVALID AND WILL BE PENALIZED!
        </task>
        TXT;
    }

    public function messages(): array
    {
        return [
            new TextMessage(role: Role::User, content: $this->prompt()),
        ];
    }

    public function tools(): array
    {
        return [
			new Extract(schema: $this->extractor->schema)
		];
    }

	public function toolChoice(): ToolChoice|string
	{
		return ToolChoice::Required;
	}
}
